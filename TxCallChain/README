Two applications where an ejb in appOne call an ejb in appTwo

The EJB's are transactional and show that the invoked target will have a transaction.

Note the configuration is made for EAP7 or WildFly


use-case:
=========

1) call via remote interface in a different server using remote-outbound-connection
   - Install two servers; separate or by copy the standalone directory as shown below
   - cp appOne/ear/target/TxCallChain-AppOne.ear SERVER_HOME/server1/deployments
   - cp appTwo/ear/target/TxCallChain-AppTwo.ear SERVER_HOME/server2/deployments
   - apply server1.cli to the server where you deploy appOne
   - apply server2.cli to the server where you deploy appTwo
   - call "mvn exec:java [-Dexec.args='full']" in the client directory

2) call a loopback, appOne->appTwo->appOne
   - remote-outbound is already installed in step 2
   - add the jboss-ejb-client.xml to appTwo by rename the file in appTwo/ear/src/main/application/META-INF
   - deploy
   - call mvn exec:java -Dexec.args="loopback" in client directory

3) call via remote interface in the same server
   - add the jboss-ejb-client.xml to appOne by rename the appOne/ear/src/main/application/META-INF/add-jboss-ejb-client.xml
   deploy both applications in the same instance
   call "mvn exec:java" in the client directory




Install the servers
===================
- use EAP7 or Wildfly
- copy standalone directory into server1 and server2
- add an application user to the server
    bin/add-user.sh -sc server1/configuration -a -u client -p client1
    bin/add-user.sh -sc server2/configuration -a -u client -p client1
    bin/add-user.sh -sc server2/configuration -a -u server -p server1
- start server 1
     bin/standalone.sh -Djboss.server.base.dir=server1 -Djboss.socket.binding.port-offset=0 -Djboss.node.name=server1
- start server 2
     bin/standalone.sh -Djboss.server.base.dir=server2 -Djboss.socket.binding.port-offset=100 -Djboss.node.name=server2


Some build notes:
=================
The appOneInterface project is the API for the AppOne, it can't be build inside of appOne (as done in appTwo) because of the cyclic dependecy as appOne need appTwo client API and appTwo need appOne API for the callback.
